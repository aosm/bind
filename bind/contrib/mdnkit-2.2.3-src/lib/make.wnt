# $Id: make.wnt,v 1.1.1.1 2002/11/18 22:25:22 bbraun Exp $
# Makefile for MDN library, manually configured for WIN-NT (VC5.0)
#
# Copyright (c) 2000 Japan Network Information Center.  All rights reserved.
#  
# By using this file, you agree to the terms and conditions set forth bellow.
# 
# 			LICENSE TERMS AND CONDITIONS 
# 
# The following License Terms and Conditions apply, unless a different
# license is obtained from Japan Network Information Center ("JPNIC"),
# a Japanese association, Kokusai-Kougyou-Kanda Bldg 6F, 2-3-4 Uchi-Kanda,
# Chiyoda-ku, Tokyo 101-0047, Japan.
# 
# 1. Use, Modification and Redistribution (including distribution of any
#    modified or derived work) in source and/or binary forms is permitted
#    under this License Terms and Conditions.
# 
# 2. Redistribution of source code must retain the copyright notices as they
#    appear in each source code file, this License Terms and Conditions.
# 
# 3. Redistribution in binary form must reproduce the Copyright Notice,
#    this License Terms and Conditions, in the documentation and/or other
#    materials provided with the distribution.  For the purposes of binary
#    distribution the "Copyright Notice" refers to the following language:
#    "Copyright (c) Japan Network Information Center.  All rights reserved."
# 
# 4. Neither the name of JPNIC may be used to endorse or promote products
#    derived from this Software without specific prior written approval of
#    JPNIC.
# 
# 5. Disclaimer/Limitation of Liability: THIS SOFTWARE IS PROVIDED BY JPNIC
#    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
#    PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL JPNIC BE LIABLE
#    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
#    BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#    WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#    OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#    ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
# 
# 6. Indemnification by Licensee
#    Any person or entities using and/or redistributing this Software under
#    this License Terms and Conditions shall defend indemnify and hold
#    harmless JPNIC from and against any and all judgements damages,
#    expenses, settlement liabilities, cost and other liabilities of any
#    kind as a result of use and redistribution of this Software or any
#    claim, suite, action, litigation or proceeding by any third party
#    arising out of or relates to this License Terms and Conditions.
# 
# 7. Governing Law, Jurisdiction and Venue
#    This License Terms and Conditions shall be governed by and and
#    construed in accordance with the law of Japan. Any person or entities
#    using and/or redistributing this Software under this License Terms and
#    Conditions hereby agrees and consent to the personal and exclusive
#    jurisdiction and venue of Tokyo District Court of Japan.

!include <ntwin32.mak>

INCDIR = ..\include
ICONVDIR = ..\win
LIBS =
SYSLIBS = $(conlibsdll)

#
# Files to build MDN library
#

HDRS =  $(ICONVDIR)\iconv.h \
	$(INCDIR)\config.h \
	$(INCDIR)\mdn\ace.h \
	$(INCDIR)\mdn\altdude.h \
	$(INCDIR)\mdn\amcacem.h \
	$(INCDIR)\mdn\amcaceo.h \
	$(INCDIR)\mdn\amcacer.h \
	$(INCDIR)\mdn\amcacev.h \
	$(INCDIR)\mdn\amcacew.h \
	$(INCDIR)\mdn\amcacez.h \
	$(INCDIR)\mdn\api.h \
	$(INCDIR)\mdn\assert.h \
	$(INCDIR)\mdn\brace.h \
	$(INCDIR)\mdn\checker.h \
	$(INCDIR)\mdn\converter.h \
	$(INCDIR)\mdn\debug.h \
	$(INCDIR)\mdn\delimitermap.h \
	$(INCDIR)\mdn\dn.h \
	$(INCDIR)\mdn\dude.h \
	$(INCDIR)\mdn\filechecker.h \
	$(INCDIR)\mdn\filemapper.h \
	$(INCDIR)\mdn\lace.h \
	$(INCDIR)\mdn\localencoding.h \
	$(INCDIR)\mdn\log.h \
	$(INCDIR)\mdn\logmacro.h \
	$(INCDIR)\mdn\mace.h \
	$(INCDIR)\mdn\mapper.h \
	$(INCDIR)\mdn\mapselector.h \
	$(INCDIR)\mdn\msgheader.h \
	$(INCDIR)\mdn\msgtrans.h \
	$(INCDIR)\mdn\nameprep.h \
	$(INCDIR)\mdn\normalizer.h \
	$(INCDIR)\mdn\race.h \
	$(INCDIR)\mdn\res.h \
	$(INCDIR)\mdn\resconf.h \
	$(INCDIR)\mdn\result.h \
	$(INCDIR)\mdn\selectiveencode.h \
	$(INCDIR)\mdn\strhash.h \
	$(INCDIR)\mdn\ucsmap.h \
	$(INCDIR)\mdn\ucsset.h \
	$(INCDIR)\mdn\unicode.h \
	$(INCDIR)\mdn\unormalize.h \
	$(INCDIR)\mdn\utf5.h \
	$(INCDIR)\mdn\utf6.h \
	$(INCDIR)\mdn\utf8.h \
	$(INCDIR)\mdn\util.h \
	$(INCDIR)\mdn\version.h

SRCS =  ace.c altdude.c amcacem.c amcaceo.c amcacer.c \
	amcacev.c amcacew.c amcacez.c api.c \
	brace.c checker.c converter.c \
	debug.c delimitermap.c dn.c dude.c \
	filechecker.c filemapper.c \
	lace.c localencoding.c log.c \
	mace.c mapper.c mapselector.c msgheader.c msgtrans.c \
	nameprep.c nameprep_template.c nameprepdata.c normalizer.c \
	race.c res.c resconf.c result.c \
	selectiveencode.c strhash.c \
	ucsmap.c ucsset.c unicode.c unicode_template.c \
	unicodedata_301.c unicodedata_310.c unormalize.c \
	utf5.c utf6.c utf8.c util.c version.c

OBJS =  ace.obj altdude.obj amcacem.obj amcaceo.obj amcacer.obj \
	amcacev.obj amcacew.obj amcacez.obj api.obj \
	brace.obj checker.obj converter.obj \
	debug.obj delimitermap.obj dn.obj dude.obj \
	filechecker.obj filemapper.obj \
	lace.obj localencoding.obj log.obj \
	mace.obj mapper.obj mapselector.obj msgheader.obj msgtrans.obj \
	nameprep.obj normalizer.obj \
	race.obj res.obj resconf.obj result.obj \
	selectiveencode.obj strhash.obj \
	ucsmap.obj ucsset.obj unicode.obj unormalize.obj \
	utf5.obj utf6.obj utf8.obj util.obj version.obj

LIB = libmdn.lib

DBG = -DDEBUG

#
# Target to build
#

all: $(LIB)

libmdn.lib: $(OBJS)
        -del libmdn.lib
	lib /out:libmdn.lib $(OBJS)

#
# Dependencies
#

ace.obj: ace.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

altdude.obj: altdude.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

amcacem.obj: amcacem.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

amcaceo.obj: amcaceo.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

amcacer.obj: amcacer.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

amcacev.obj: amcacev.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

amcacew.obj: amcacew.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

amcacez.obj: amcacez.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

api.obj: api.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

brace.obj: brace.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

checker.obj: checker.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

converter.obj: converter.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

debug.obj: debug.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

delimitermap.obj: delimitermap.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

dn.obj: dn.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

dude.obj: dude.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

filechecker.obj: filechecker.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

filemapper.obj: filemapper.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

lace.obj: lace.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

localencoding.obj: localencoding.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

log.obj: log.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

mace.obj: mace.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

mapper.obj: mapper.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

mapselector.obj: mapselector.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

msgheader.obj: msgheader.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

msgtrans.obj: msgtrans.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

nameprep.obj: nameprep.c nameprep_template.c nameprepdata.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

normalizer.obj: normalizer.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

race.obj: race.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

res.obj: res.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

resconf.obj: resconf.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

result.obj: result.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

selectiveencode.obj: selectiveencode.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

strhash.obj: strhash.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

ucsmap.obj: ucsmap.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

ucsset.obj: ucsset.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

unicode.obj: unicode.c unicode_template.c unicodedata_301.c unicodedata_310.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

unormalize.obj: unormalize.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

utf5.obj: utf5.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

utf6.obj: utf6.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

utf8.obj: utf8.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

util.obj: util.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c

version.obj: version.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) $(DBG) $*.c


#
# misc.
#

install:

clean:
	del *.obj *.lib core *.core *~

